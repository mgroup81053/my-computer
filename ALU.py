from LogicGate import *
from Adder_16bit import adder_16bit

def ALU(X: list[bool], Y: list[bool], zx, nx, zy, ny, f, no):
    X[0] = NIMPLY(X[0], zx)
    X[1] = NIMPLY(X[1], zx)
    X[2] = NIMPLY(X[2], zx)
    X[3] = NIMPLY(X[3], zx)
    X[4] = NIMPLY(X[4], zx)
    X[5] = NIMPLY(X[5], zx)
    X[6] = NIMPLY(X[6], zx)
    X[7] = NIMPLY(X[7], zx)
    X[8] = NIMPLY(X[8], zx)
    X[9] = NIMPLY(X[9], zx)
    X[10] = NIMPLY(X[10], zx)
    X[11] = NIMPLY(X[11], zx)
    X[12] = NIMPLY(X[12], zx)
    X[13] = NIMPLY(X[13], zx)
    X[14] = NIMPLY(X[14], zx)
    X[15] = NIMPLY(X[15], zx)

    X[0] = XOR(X[0], nx)
    X[1] = XOR(X[1], nx)
    X[2] = XOR(X[2], nx)
    X[3] = XOR(X[3], nx)
    X[4] = XOR(X[4], nx)
    X[5] = XOR(X[5], nx)
    X[6] = XOR(X[6], nx)
    X[7] = XOR(X[7], nx)
    X[8] = XOR(X[8], nx)
    X[9] = XOR(X[9], nx)
    X[10] = XOR(X[10], nx)
    X[11] = XOR(X[11], nx)
    X[12] = XOR(X[12], nx)
    X[13] = XOR(X[13], nx)
    X[14] = XOR(X[14], nx)
    X[15] = XOR(X[15], nx)

    Y[0] = NIMPLY(Y[0], zy)
    Y[1] = NIMPLY(Y[1], zy)
    Y[2] = NIMPLY(Y[2], zy)
    Y[3] = NIMPLY(Y[3], zy)
    Y[4] = NIMPLY(Y[4], zy)
    Y[5] = NIMPLY(Y[5], zy)
    Y[6] = NIMPLY(Y[6], zy)
    Y[7] = NIMPLY(Y[7], zy)
    Y[8] = NIMPLY(Y[8], zy)
    Y[9] = NIMPLY(Y[9], zy)
    Y[10] = NIMPLY(Y[10], zy)
    Y[11] = NIMPLY(Y[11], zy)
    Y[12] = NIMPLY(Y[12], zy)
    Y[13] = NIMPLY(Y[13], zy)
    Y[14] = NIMPLY(Y[14], zy)
    Y[15] = NIMPLY(Y[15], zy)

    Y[0] = XOR(Y[0], ny)
    Y[1] = XOR(Y[1], ny)
    Y[2] = XOR(Y[2], ny)
    Y[3] = XOR(Y[3], ny)
    Y[4] = XOR(Y[4], ny)
    Y[5] = XOR(Y[5], ny)
    Y[6] = XOR(Y[6], ny)
    Y[7] = XOR(Y[7], ny)
    Y[8] = XOR(Y[8], ny)
    Y[9] = XOR(Y[9], ny)
    Y[10] = XOR(Y[10], ny)
    Y[11] = XOR(Y[11], ny)
    Y[12] = XOR(Y[12], ny)
    Y[13] = XOR(Y[13], ny)
    Y[14] = XOR(Y[14], ny)
    Y[15] = XOR(Y[15], ny)





    X2 = [False]*16
    Y2 = [False]*16

    X[0], X2[0] = dmux(X[0], f)
    X[1], X2[1] = dmux(X[1], f)
    X[2], X2[2] = dmux(X[2], f)
    X[3], X2[3] = dmux(X[3], f)
    X[4], X2[4] = dmux(X[4], f)
    X[5], X2[5] = dmux(X[5], f)
    X[6], X2[6] = dmux(X[6], f)
    X[7], X2[7] = dmux(X[7], f)
    X[8], X2[8] = dmux(X[8], f)
    X[9], X2[9] = dmux(X[9], f)
    X[10], X2[10] = dmux(X[10], f)
    X[11], X2[11] = dmux(X[11], f)
    X[12], X2[12] = dmux(X[12], f)
    X[13], X2[13] = dmux(X[13], f)
    X[14], X2[14] = dmux(X[14], f)
    X[15], X2[15] = dmux(X[15], f)

    Y[0], Y2[0] = dmux(Y[0], f)
    Y[1], Y2[1] = dmux(Y[1], f)
    Y[2], Y2[2] = dmux(Y[2], f)
    Y[3], Y2[3] = dmux(Y[3], f)
    Y[4], Y2[4] = dmux(Y[4], f)
    Y[5], Y2[5] = dmux(Y[5], f)
    Y[6], Y2[6] = dmux(Y[6], f)
    Y[7], Y2[7] = dmux(Y[7], f)
    Y[8], Y2[8] = dmux(Y[8], f)
    Y[9], Y2[9] = dmux(Y[9], f)
    Y[10], Y2[10] = dmux(Y[10], f)
    Y[11], Y2[11] = dmux(Y[11], f)
    Y[12], Y2[12] = dmux(Y[12], f)
    Y[13], Y2[13] = dmux(Y[13], f)
    Y[14], Y2[14] = dmux(Y[14], f)
    Y[15], Y2[15] = dmux(Y[15], f)





    out1 = [False]*16
    out1[0] = AND(X[0], Y[0])
    out1[1] = AND(X[1], Y[1])
    out1[2] = AND(X[2], Y[2])
    out1[3] = AND(X[3], Y[3])
    out1[4] = AND(X[4], Y[4])
    out1[5] = AND(X[5], Y[5])
    out1[6] = AND(X[6], Y[6])
    out1[7] = AND(X[7], Y[7])
    out1[8] = AND(X[8], Y[8])
    out1[9] = AND(X[9], Y[9])
    out1[10] = AND(X[10], Y[10])
    out1[11] = AND(X[11], Y[11])
    out1[12] = AND(X[12], Y[12])
    out1[13] = AND(X[13], Y[13])
    out1[14] = AND(X[14], Y[14])
    out1[15] = AND(X[15], Y[15])

    out2 = adder_16bit(X2, Y2)





    out = [False]*16
    out[0] = OR(out1[0], out2[0])
    out[1] = OR(out1[1], out2[1])
    out[2] = OR(out1[2], out2[2])
    out[3] = OR(out1[3], out2[3])
    out[4] = OR(out1[4], out2[4])
    out[5] = OR(out1[5], out2[5])
    out[6] = OR(out1[6], out2[6])
    out[7] = OR(out1[7], out2[7])
    out[8] = OR(out1[8], out2[8])
    out[9] = OR(out1[9], out2[9])
    out[10] = OR(out1[10], out2[10])
    out[11] = OR(out1[11], out2[11])
    out[12] = OR(out1[12], out2[12])
    out[13] = OR(out1[13], out2[13])
    out[14] = OR(out1[14], out2[14])
    out[15] = OR(out1[15], out2[15])


    out[0] = XOR(out[0], no)
    out[1] = XOR(out[1], no)
    out[2] = XOR(out[2], no)
    out[3] = XOR(out[3], no)
    out[4] = XOR(out[4], no)
    out[5] = XOR(out[5], no)
    out[6] = XOR(out[6], no)
    out[7] = XOR(out[7], no)
    out[8] = XOR(out[8], no)
    out[9] = XOR(out[9], no)
    out[10] = XOR(out[10], no)
    out[11] = XOR(out[11], no)
    out[12] = XOR(out[12], no)
    out[13] = XOR(out[13], no)
    out[14] = XOR(out[14], no)
    out[15] = XOR(out[15], no)


    return out